// OnlineUsta Marketplace Database Schema - Armut.com benzeri platform
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================================
// USER MANAGEMENT
// ====================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?  @unique
  firstName String
  lastName  String
  avatar    String?
  role      UserRole @default(CUSTOMER)
  
  // Authentication
  emailVerified   DateTime?
  phoneVerified   DateTime?
  passwordHash    String?
  refreshTokens   RefreshToken[]
  
  // Location
  city      String
  district  String
  address   String?
  latitude  Float?
  longitude Float?
  
  // Professional specific fields
  bio                String?
  website            String?
  experienceYears    Int?
  isVerified         Boolean  @default(false)
  verifiedAt         DateTime?
  verificationDocuments String[] // ID, certificate images
  
  // Ratings & Stats
  rating              Float?   @default(0)
  reviewCount         Int      @default(0)
  completedJobsCount  Int      @default(0)
  responseTimeAvg     Int?     // in minutes
  
  // Settings
  isAvailable         Boolean  @default(true)
  autoReplyEnabled    Boolean  @default(false)
  autoReplyMessage    String?
  notificationSettings Json?
  
  // Business Info
  companyName         String?
  taxNumber           String?
  iban                String?
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastActiveAt  DateTime @default(now())
  
  // Relations
  serviceRequests     ServiceRequest[]
  offers              Offer[]
  reviews             Review[]
  reviewsReceived     Review[]         @relation("ReviewReceiver")
  conversations       Conversation[]   @relation("ConversationParticipant")
  messages            Message[]
  notifications       Notification[]
  portfolioItems      Portfolio[]
  userCategories      UserCategory[]
  transactions        Transaction[]
  complaints          Complaint[]      @relation("ComplaintTarget") 
  reportedComplaints  Complaint[]      @relation("ComplaintReporter")
  
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("refresh_tokens")
}

// ====================================
// CATEGORIES & SERVICES  
// ====================================

model ServiceCategory {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String  @unique
  description String?
  icon        String?
  image       String?
  color       String? // For UI theming
  
  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String[]
  
  // Hierarchy
  parentId Int?
  parent   ServiceCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ServiceCategory[] @relation("CategoryHierarchy")
  
  // Configuration
  isActive         Boolean @default(true)
  order            Int     @default(0)
  requiresLocation Boolean @default(true)
  maxBudget        Float?
  minBudget        Float?
  
  // Form Questions
  customQuestions  Json? // Dynamic form fields for this category
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  serviceRequests ServiceRequest[]
  userCategories  UserCategory[]
  
  @@map("service_categories")
}

model UserCategory {
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId   Int
  category     ServiceCategory @relation(fields: [categoryId], references: [id])
  
  // Professional's pricing for this category
  minPrice     Float?
  maxPrice     Float?
  priceUnit    PriceUnit?      @default(PER_JOB)
  
  // Experience & Skills
  experience   String?
  skills       String[]
  certificates String[] // Certificate image URLs
  
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  
  @@unique([userId, categoryId])
  @@map("user_categories")
}

// ====================================
// SERVICE REQUESTS & OFFERS
// ====================================

model ServiceRequest {
  id          String                @id @default(cuid())
  title       String
  description String
  budget      Float?
  budgetType  BudgetType           @default(FIXED)
  
  // Location
  city        String
  district    String
  address     String?
  latitude    Float?
  longitude   Float?
  
  // Category
  categoryId  Int
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  
  // Customer
  customerId  String
  customer    User   @relation(fields: [customerId], references: [id])
  
  // Status & Priority
  status      RequestStatus    @default(DRAFT)
  priority    RequestPriority  @default(NORMAL)
  urgency     Urgency         @default(NORMAL)
  
  // Schedule
  preferredDate    DateTime?
  preferredTime    String? // "morning", "afternoon", "evening"
  isFlexible       Boolean   @default(true)
  completionDate   DateTime?
  
  // Media & Additional Info
  images           String[]
  documents        String[]
  customAnswers    Json?     // Answers to category-specific questions
  
  // Metrics
  viewCount        Int       @default(0)
  offerCount       Int       @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?
  publishedAt DateTime?
  
  // Relations
  offers         Offer[]
  conversations  Conversation[]
  transactions   Transaction[]
  
  @@map("service_requests")
}

model Offer {
  id          String @id @default(cuid())
  price       Float
  description String
  message     String? // Personal message to customer
  
  // Timeline
  estimatedDuration    Int?     // in hours
  startDate           DateTime?
  completionDate      DateTime?
  
  // Service Details
  includesTransport   Boolean  @default(false)
  includesMaterials   Boolean  @default(false)
  warranty            String?  // "1 year", "6 months" etc.
  
  // Service Request
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  
  // Professional
  professionalId String
  professional   User   @relation(fields: [professionalId], references: [id])
  
  // Status
  status OfferStatus @default(PENDING)
  
  // Customer actions
  customerViewed  Boolean   @default(false)
  customerViewedAt DateTime?
  rejectionReason String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?
  acceptedAt DateTime?
  
  // Relations
  transactions Transaction[]
  
  @@unique([serviceRequestId, professionalId])
  @@map("offers")
}

// ====================================
// MESSAGING SYSTEM
// ====================================

model Conversation {
  id               String         @id @default(cuid())
  serviceRequestId String?
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  
  // Participants (always 2: customer + professional)
  participants     User[]         @relation("ConversationParticipant")
  
  // Status
  isActive         Boolean        @default(true)
  lastMessageAt    DateTime       @default(now())
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  messages  Message[]
  
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  messageType    MessageType  @default(TEXT)
  attachments    String[]     // File URLs
  
  // Conversation
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Sender
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  
  // Status
  isRead         Boolean      @default(false)
  readAt         DateTime?
  isSystem       Boolean      @default(false) // System generated messages
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("messages")
}

// ====================================
// REVIEWS & RATINGS
// ====================================

model Review {
  id       String @id @default(cuid())
  rating   Int    // 1-5
  comment  String?
  images   String[]
  
  // Detailed ratings
  qualityRating      Int? // 1-5
  timelinessRating   Int? // 1-5
  communicationRating Int? // 1-5
  valueRating        Int? // 1-5
  
  // Relations
  reviewerId       String
  reviewer         User   @relation(fields: [reviewerId], references: [id])
  
  receiverId       String
  receiver         User   @relation("ReviewReceiver", fields: [receiverId], references: [id])
  
  // Context
  serviceRequestId String?
  offerId         String?
  
  // Moderation
  isApproved      Boolean @default(false)
  moderatedAt     DateTime?
  moderationNotes String?
  
  // Response
  response        String? // Professional's response to review
  responseDate    DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reviews")
}

// ====================================
// PORTFOLIO & MEDIA
// ====================================

model Portfolio {
  id          String @id @default(cuid())
  title       String
  description String?
  images      String[]
  beforeImage String?
  afterImage  String?
  
  // Professional
  professionalId String
  professional   User   @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  
  // Category
  categoryId  Int?
  
  // Project details
  projectDate DateTime?
  location    String?
  projectCost Float?
  
  // Status
  isActive    Boolean @default(true)
  featured    Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("portfolio")
}

// ====================================
// TRANSACTIONS & PAYMENTS
// ====================================

model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  currency    String           @default("TRY")
  
  // Parties
  payerId     String
  payer       User             @relation(fields: [payerId], references: [id])
  
  // Service context
  serviceRequestId String?
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  
  offerId     String?
  
  // Transaction details
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  
  // Payment provider details
  paymentProvider  String? // "stripe", "iyzico", etc.
  externalId      String? // Payment provider transaction ID
  
  // Fees
  platformFee     Float?
  processingFee   Float?
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  processedAt  DateTime?
  
  @@map("transactions")
}

// ====================================
// NOTIFICATIONS
// ====================================

model Notification {
  id       String           @id @default(cuid())
  title    String
  message  String
  type     NotificationType
  
  // Target user
  userId   String
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Status
  isRead   Boolean @default(false)
  readAt   DateTime?
  
  // Action data
  actionUrl String?
  metadata  Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("notifications")
}

// ====================================
// COMPLAINTS & MODERATION
// ====================================

model Complaint {
  id          String        @id @default(cuid())
  subject     String
  description String
  type        ComplaintType
  
  // Reporter
  reporterId  String
  reporter    User @relation("ComplaintReporter", fields: [reporterId], references: [id])
  
  // Target
  targetId    String
  target      User @relation("ComplaintTarget", fields: [targetId], references: [id])
  
  // Context
  serviceRequestId String?
  offerId         String?
  
  // Status
  status      ComplaintStatus @default(PENDING)
  resolution  String?
  resolvedBy  String? // Admin user ID
  resolvedAt  DateTime?
  
  // Evidence
  evidence    String[] // Screenshot URLs, etc.
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("complaints")
}

// ====================================
// ENUMS
// ====================================

enum UserRole {
  CUSTOMER
  PROFESSIONAL
  ADMIN
  MODERATOR
}

enum RequestStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum RequestPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum Urgency {
  ASAP        // Within 24 hours
  THIS_WEEK   // Within 7 days
  THIS_MONTH  // Within 30 days
  NORMAL      // Flexible timing
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  EXPIRED
  COMPLETED
}

enum BudgetType {
  FIXED        // Fixed price
  HOURLY       // Per hour pricing
  NEGOTIABLE   // Price to be discussed
}

enum PriceUnit {
  PER_JOB
  PER_HOUR
  PER_DAY
  PER_SQUARE_METER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  OFFER_UPDATE
}

enum TransactionType {
  SERVICE_PAYMENT
  PLATFORM_FEE
  REFUND
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum NotificationType {
  NEW_OFFER
  OFFER_ACCEPTED
  OFFER_REJECTED
  NEW_MESSAGE
  SERVICE_COMPLETED
  REVIEW_RECEIVED
  PAYMENT_RECEIVED
  SYSTEM_ANNOUNCEMENT
}

enum ComplaintType {
  POOR_SERVICE
  NO_SHOW
  OVERCHARGING
  INAPPROPRIATE_BEHAVIOR
  SPAM
  FAKE_PROFILE
  OTHER
}

enum ComplaintStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
} 