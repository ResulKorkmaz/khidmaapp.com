// OnlineUsta Marketplace Database Schema - Armut.com benzeri platform
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?  @unique
  firstName String
  lastName  String
  avatar    String?
  role      UserRole @default(CUSTOMER)
  
  // Location
  city     String
  district String
  address  String?
  
  // Profile
  bio          String?
  isVerified   Boolean @default(false)
  verifiedAt   DateTime?
  rating       Float?  @default(0)
  reviewCount  Int     @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  serviceRequests ServiceRequest[]
  offers          Offer[]
  reviews         Review[]
  reviewsReceived Review[]        @relation("ReviewReceiver")
  
  @@map("users")
}

model ServiceCategory {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String  @unique
  description String?
  icon        String?
  image       String?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Hierarchy
  parentId Int?
  parent   ServiceCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ServiceCategory[] @relation("CategoryHierarchy")
  
  // Status
  isActive Boolean @default(true)
  order    Int     @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  serviceRequests ServiceRequest[]
  
  @@map("service_categories")
}

model ServiceRequest {
  id          String                @id @default(cuid())
  title       String
  description String
  budget      Float?
  
  // Location
  city     String
  district String
  address  String?
  
  // Category
  categoryId Int
  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  
  // Customer
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])
  
  // Status & Priority
  status   RequestStatus @default(DRAFT)
  priority RequestPriority @default(NORMAL)
  
  // Schedule
  preferredDate DateTime?
  isFlexible    Boolean   @default(true)
  
  // Additional data
  images     String[]
  metadata   Json?     // Flexible data for category-specific fields
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?
  
  // Relations
  offers Offer[]
  
  @@map("service_requests")
}

model Offer {
  id          String @id @default(cuid())
  price       Float
  description String
  
  // Timeline
  estimatedDuration Int? // in hours
  availableFrom     DateTime?
  
  // Service Request
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  
  // Professional
  professionalId String
  professional   User   @relation(fields: [professionalId], references: [id])
  
  // Status
  status OfferStatus @default(PENDING)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?
  
  @@unique([serviceRequestId, professionalId])
  @@map("offers")
}

model Review {
  id       String @id @default(cuid())
  rating   Int    // 1-5
  comment  String?
  images   String[]
  
  // Relations
  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id])
  
  receiverId String
  receiver   User   @relation("ReviewReceiver", fields: [receiverId], references: [id])
  
  // Context
  serviceRequestId String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reviews")
}

// Enums
enum UserRole {
  CUSTOMER
  PROFESSIONAL
  ADMIN
}

enum RequestStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum RequestPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  EXPIRED
} 